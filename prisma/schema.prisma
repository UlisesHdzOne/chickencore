generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_CHANGE
  EMAIL_VERIFICATION
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  SESSION_LOGOUT
  ACCOUNT_LOCKED
}

model User {
  id                      Int                      @id @default(autoincrement())
  name                    String?
  email                   String                   @unique
  password                String
  role                    Role                     @default(USER)
  isActive                Boolean                  @default(true)
  emailVerified           Boolean                  @default(false)
  firstName               String?
  lastName                String?
  phoneNumber             String?
  profilePicture          String? // URL o path de la imagen
  dateOfBirth             DateTime?
  bio                     String?                  @db.Text
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  refreshToken            RefreshToken?
  passwordResetTokens     PasswordResetToken[] // nombre plural
  securityLogs            SecurityLog[]
  emailVerificationTokens EmailVerificationToken[]
  sessions                UserSession[]
  addresses               Address[]
  defaultAddress          Address?                 @relation("UserDefaultAddress", fields: [defaultAddressId], references: [id])
  defaultAddressId        Int?
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int       @unique
  sessionId String?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  user    User         @relation(fields: [userId], references: [id])
  session UserSession? @relation(fields: [sessionId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model SecurityLog {
  id        Int               @id @default(autoincrement())
  userId    Int
  eventType SecurityEventType
  details   String?
  ipAddress String?
  userAgent String?
  success   Boolean           @default(true)
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
  id         String   @id @default(uuid())
  userId     Int
  deviceInfo String
  ipAddress  String
  userAgent  String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  expiresAt  DateTime

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]
}

model Address {
  id             Int       @id @default(autoincrement())
  userId         Int
  label          String // Ej: "Casa", "Trabajo", "Oficina"
  street         String
  city           String
  state          String
  postalCode     String
  country        String    @default("Mexico")
  latitude       Float?
  longitude      Float?
  isValidated    Boolean   @default(false)
  validationDate DateTime?
  isDefault      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultForUser User[]    @relation("UserDefaultAddress")

  @@unique([userId, label]) // Un usuario no puede tener dos direcciones con el mismo label
}
