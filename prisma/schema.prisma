generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  PASSWORD_CHANGE
  EMAIL_VERIFICATION
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  SESSION_LOGOUT
  ACCOUNT_LOCKED
}

model User {
  id                      Int                      @id @default(autoincrement())
  name                    String?
  email                   String                   @unique
  password                String
  role                    Role                     @default(USER)
  isActive                Boolean                  @default(true)
  emailVerified           Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  refreshToken            RefreshToken?
  passwordResetTokens     PasswordResetToken[] // nombre plural
  securityLogs            SecurityLog[]
  emailVerificationTokens EmailVerificationToken[]
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int       @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model SecurityLog {
  id        Int               @id @default(autoincrement())
  userId    Int
  eventType SecurityEventType
  details   String?
  ipAddress String?
  userAgent String?
  success   Boolean           @default(true)
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
